#!/bin/bash

VERSION_NUM=5.0.1
VERSION_NOTE="See https://github.com/taikedz/bbuild"

[[ "$*" = --version ]] && {
	echo "$VERSION_NUM"
	echo "$VERSION_NOTE"
	exit
}

### Bash Builder 5 Usage:help
# 
# This project is hosted at
#   https://github.com/taikedz/bbuild
#
#
# Build a script using Bash Builder
#
# 	bbuild [OPTIONS ...] SCRIPTS ...
#
# Options
# -------
#
#   -c
#   --check
#   	use shellcheck for subsequent files
#
#   -C
#   --no-check
#   	don't use shellcheck for subsequent files
#
#   --ignore-tags
#   	Ignore tags in sourced files
#
#   --out=DIRECTORY
#   	Specify the output directory
#
# Environment
# -----------
#
# You can set environment variables in your .bashrc file, or in a local `./bbuild_env` file, which is sourced once before commencing build.
#
# The order of precedence for options and environment variables is:
#
# * command line arguments
# * `bbuild_env` settings
# * local environment settings
# * `.bashrc` settings
#
# Environment variables available, and their defaults:
#
# BBPATH -- a colon-separated list of directories wherein to find files for inclusion:
#
# 	BBPATH=$HOME/.local/lib/bbuild:/usr/local/lib/bbuild
#
#
# SHELLCHECK -- "true" or "false", whether to run shellcheck on the finally built script
#
# 	SHELLCHECK=false
#
#
# BUILDOUTD -- directory in which to place build results
#
#	BUILDOUTD=./build-outd
#
#
# IGNORETAGS -- if set to "unsafe", ignores tags and their effects.
#
# 	(unset by default)
#
# BBFILES -- a list of files to build ; overridden by any files specified on the command line
#   Surround these in parentheses to specify several scripts.
#   This allows simply running "bbuild" to build specified project scripts
#
# 	BBFILES=(src/script1 src/script2 libs/support_script)
#
###/doc

### runmain SCRIPTNAME FUNCTION [ARGUMENTS ...] Usage:bbuild
#
# Runs the function FUNCTION with ARGUMENTS, only if the runtime
# name of the script matches SCRIPTNAME
#
# This allows you include a main-like function in your library
# that only runs if you use your lib as an executabl itself.
#
# For example, an image archiver could be:
#
# 	function archive_images {
# 		tar czf "$1.tgz" "$@"
# 	}
#
# 	runmain archiveimages.sh archive_images "$@"
#
# When included a different script, the runmain call does not fire the lib's function
#
# If the lib is compiled/made executable, and named "archiveimages.sh", the function runs.
#
# This is similar to `if __name__ == "__main__"` clauses in python
#
###/doc

function runmain {
	local required_name="$1"; shift || :
	local funcall="$1"; shift || :
	local scriptname="$(basename "$0")"

	if [[ "$required_name" = "$scriptname" ]]; then
		"$funcall" "$@"
	fi
}

#!/bin/bash

### autohelp:print [ SECTION [FILE] ] Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from your script, or a file, call the
# `autohelp:print` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#	### <title> Usage:help
#	#
#	# <some content>
#	#
#	# end with "###/doc" on its own line (whitespaces before
#	# and after are OK)
#	#
#	###/doc
#
# You can set a different help section by specifying a subsection
#
# 	autohelp:print section2
#
# > This would print a section defined in this way:
#
# 	### Some title Usage:section2
# 	# <some content>
# 	###/doc
#
# You can set a different comment character by setting the 'HELPCHAR' environment variable:
#
# 	HELPCHAR=%
#
###/doc

HELPCHAR='#'

function autohelp:print {
	local SECTION_STRING="${1:-}"; shift || :
	local TARGETFILE="${1:-}"; shift || :
	[[ -n "$SECTION_STRING" ]] || SECTION_STRING=help
	[[ -n "$TARGETFILE" ]] || TARGETFILE="$0"

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s+(.+?)\s+Usage:'"$SECTION_STRING"'\s*$'
        local SECEND='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s*/doc\s*$'
        local insec=false

        while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        insec=true
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"

                elif [[ "$insec" = true ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                insec=false
                        else
				echo "$secline" | sed -r "s/^\s*$HELPCHAR//g"
                        fi
                fi
        done < "$TARGETFILE"

        if [[ "$insec" = true ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
        fi
	echo ""
}

### autohelp:paged Usage:bbuild
#
# Display the help in the pager defined in the PAGER environment variable
#
###/doc
function autohelp:paged {
	: ${PAGER=less}
	autohelp:print "$@" | $PAGER
}

### autohelp:check Usage:bbuild
#
# Automatically print help and exit if "--help" is detected in arguments
#
# Example use:
#
#	#!/bin/bash
#
#	### Some help Usage:help
#	#
#	# Some help text
#	#
#	###/doc
#
#	#%include autohelp.sh
#
#	main() {
#		autohelp:check "$@"
#
#		# now add your code
#	}
#
#	main "$@"
#
###/doc
autohelp:check() {
	if [[ "$*" =~ --help ]]; then
		cols="$(tput cols)"
		autohelp:print | fold -w "$cols" -s || autohelp:print
		exit 0
	fi
}
#!/bin/bash

#!/bin/bash

### Colours for bash Usage:bbuild
# A series of colour flags for use in outputs.
#
# Example:
# 	
# 	echo -e "${CRED}Some red text ${CBBLU} some blue text $CDEF some text in the terminal's default colour"
#
# Requires processing of escape characters.
#
# Colours available:
#
# CRED, CBRED, HLRED -- red, bold red, highlight red
# CGRN, CBGRN, HLGRN -- green, bold green, highlight green
# CYEL, CBYEL, HLYEL -- yellow, bold yellow, highlight yellow
# CBLU, CBBLU, HLBLU -- blue, bold blue, highlight blue
# CPUR, CBPUR, HLPUR -- purple, bold purple, highlight purple
# CTEA, CBTEA, HLTEA -- teal, bold teal, highlight teal
#
# CDEF -- switches to the terminal default
# CUNL -- add underline
#
# Note that highlight and underline must be applied or re-applied after specifying a colour.
#
###/doc

export CRED="\033[0;31m"
export CGRN="\033[0;32m"
export CYEL="\033[0;33m"
export CBLU="\033[0;34m"
export CPUR="\033[0;35m"
export CTEA="\033[0;36m"

export CBRED="\033[1;31m"
export CBGRN="\033[1;32m"
export CBYEL="\033[1;33m"
export CBBLU="\033[1;34m"
export CBPUR="\033[1;35m"
export CBTEA="\033[1;36m"

export HLRED="\033[41m"
export HLGRN="\033[42m"
export HLYEL="\033[43m"
export HLBLU="\033[44m"
export HLPUR="\033[45m"
export HLTEA="\033[46m"

export CDEF="\033[0m"

### Console output handlers Usage:bbuild
#
# Write data to console stderr using colouring
#
###/doc

### Environment Variables Usage:bbuild
#
# MODE_DEBUG : set to 'true' to enable debugging output
# MODE_DEBUG_VERBOSE : set to 'true' to enable command echoing
#
###/doc

: ${MODE_DEBUG=false}
: ${MODE_DEBUG_VERBOSE=false}

# Internal
function out:buffer_initialize {
	OUTPUT_BUFFER_defer=(:)
}
out:buffer_initialize

### out:debug MESSAGE Usage:bbuild
# print a blue debug message to stderr
# only prints if MODE_DEBUG is set to "true"
###/doc
function out:debug {
	if [[ "$MODE_DEBUG" = true ]]; then
		echo -e "${CBBLU}DEBUG: $CBLU$*$CDEF" 1>&2
	fi
}

### out:debug:fork [MARKER] Usage:bbuild
#
# Pipe the data coming through stdin to stdout
#
# If debug mode is on, *also* write the same data to stderr, each line preceded by MARKER
#
# Insert this debug fork into pipes to see their output
#
###/doc
function out:debug:fork {
	if [[ "$MODE_DEBUG" = true ]]; then
		local MARKER="${1:-DEBUG: }"; shift || :

		cat - | sed -r "s/^/$MARKER/" | tee -a /dev/stderr
	else
		cat -
	fi
}

### out:info MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function out:info {
	echo -e "$CGRN$*$CDEF" 1>&2
}

### out:warn MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function out:warn {
	echo -e "${CBYEL}WARN: $CYEL$*$CDEF" 1>&2
}

### out:defer MESSAGE Usage:bbuild
# Store a message in the output buffer for later use
###/doc
function out:defer {
	OUTPUT_BUFFER_defer[${#OUTPUT_BUFFER_defer[@]}]="$*"
}

### out:flush HANDLER ... Usage:bbuild
#
# Pass the output buffer to the command defined by HANDLER
# and empty the buffer
#
# Examples:
#
# 	out:flush echo -e
#
# 	out:flush out:warn
#
# (escaped newlines are added in the buffer, so `-e` option is
#  needed to process the escape sequences)
#
###/doc
function out:flush {
	[[ -n "$*" ]] || out:fail "Did not provide a command for buffered output\n\n${OUTPUT_BUFFER_defer[*]}"

	[[ "${#OUTPUT_BUFFER_defer[@]}" -gt 1 ]] || return 0

	for buffer_line in "${OUTPUT_BUFFER_defer[@]:1}"; do
		"$@" "$buffer_line"
	done

	out:buffer_initialize
}

### out:fail [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function out:fail {
	local ERCODE=127
	local numpat='^[0-9]+$'

	if [[ "$1" =~ $numpat ]]; then
		ERCODE="$1"; shift || :
	fi

	echo -e "${CBRED}ERROR FAIL: $CRED$*$CDEF" 1>&2
	exit $ERCODE
}

### out:error MESSAGE Usage:bbuild
# print a red error message to stderr
#
# unlike out:fail, does not cause script exit
###/doc
function out:error {
	echo -e "${CBRED}ERROR: ${CRED}$*$CDEF" 1>&2
}

### out:dump Usage:bbuild
#
# Dump stdin contents to console stderr. Requires debug mode.
#
# Example
#
# 	action_command 2>&1 | out:dump
#
###/doc

function out:dump {
	echo -e -n "${CBPUR}$*" 1>&2
	echo -e -n "$CPUR" 1>&2
	cat - 1>&2
	echo -e -n "$CDEF" 1>&2
}

### out:break MESSAGE Usage:bbuild
#
# Add break points to a script
#
# Requires MODE_DEBUG set to true
#
# When the script runs, the message is printed with a propmt, and execution pauses.
#
# Press return to continue execution.
#
# Type `exit`, `quit` or `stop` to stop the program. If the breakpoint is in a subshell,
#  execution from after the subshell will be resumed.
#
###/doc

function out:break {
	[[ "$MODE_DEBUG" = true ]] || return 0

	echo -en "${CRED}BREAKPOINT: $* >$CDEF " >&2
	read
	if [[ "$REPLY" =~ quit|exit|stop ]]; then
		out:fail "ABORT"
	fi
}

if [[ "$MODE_DEBUG_VERBOSE" = true ]]; then
	set -x
fi
### File Inclusion Usage:bbuild
# Library for including (once) or inserting (any time called) external files ontents
# based on developer-defined tokens
##/doc


# FIXME - set function signature in head of help
### searchpaths:file_from PATHDEF FILE Usage:bbuild
#
# Locate a file along a search path.
#
# EXAMPLE
#
# The following will look for each of the files
#  in order of preference of a local lib directory, a profile-wide one, then a system-
#  wide one.
#
#	MYPATH="./lib:$HOME/.local/lib:/usr/local/lib"
# 	searchpaths:file_from "$MYPATH" file
#
# Echoes the path of the first file found.
#
# Returns 1 on failure to find any file.
#
###/doc

function searchpaths:file_from {
	local PATHS="$1"; shift || :
	local FILE="$1"; shift || :

	out:debug "Looking for file [$FILE] amongst [$PATHS]"

	for path in $(echo "$PATHS"|tr ':' ' '); do
		out:debug "Try path: $path"
		local fpath="$path/$FILE"
		if [[ -f "$fpath" ]]; then
			echo "$fpath"
			return 0
		else
			out:debug "No $fpath"
		fi
	done
	return 1
}

includefile:reset_tracker() {
	INCLUDEFILE_tracker=""
}

### includefile:process TARGET Usage:bbuild
# Perform inclusions on stated target file
#
# Writes fully included result to stdout
#
# set INCLUDEFILE_token string to define the token which, at the begining of a line
#  declares a list of files to include
# set INCLUDEFILE_paths colon-delimited string to a search pth from which to find scripts to source
###/doc
includefile:process() {
	local target
	local workfile
	local dumpfile
	target="$1"; shift
	workfile="$(mktemp ./._include-XXXX)"
	dumpfile="$(mktemp ./._include-d-XXXX)"

	trap "includefile:cleanup" SIGINT EXIT

	: ${INCLUDEFILE_paths=./}
	: ${INCLUDEFILE_token=@include}

	includefile:reset_tracker
	
	cat "$target" > "$workfile"
	
	while includefile:_has_inclusion_line "$workfile"; do
		includefile:_process_first_inclusion "$workfile" > "$dumpfile"
		cat "$dumpfile" > "$workfile"
	done

	cat "$workfile"

	#rm "$workfile" "$dumpfile"
}

### includefile:_process_first_inclusion TARGET Usage:internal
# Find the first onclusion line, and include its targets
#
# returns 0 on successful inclusions
# returns 1 on issues with inclusions
###/doc
includefile:_process_first_inclusion() {
	local fd_target="$1"; shift
	local target="$(mktemp)"
	cat "$fd_target" > "$target"

	local pos=$(includefile:_get_inclusion_line_pos "$target")
	local inctokens=($(includefile:_get_inclusion_line_string "$target"))

	head -n $((pos - 1)) "$target"
	includefile:_cat_once "${inctokens[@]:1}" || return 1
	tail -n +$((pos + 1)) "$target"

	rm "$target"

	return 0
}

includefile:_get_inclusion_line_pos() {
	local targetfile="$1"; shift

	grep -nP "^$INCLUDEFILE_token" "$targetfile" | head -n 1 | cut -d: -f1
}

includefile:_get_inclusion_line_string() {
	local targetfile="$1"; shift

	grep -P "^$INCLUDEFILE_token" "$targetfile" | head -n 1 
}

includefile:_has_inclusion_line() {
	local targetfile="$1"; shift

	grep -qP "^$INCLUDEFILE_token" "$targetfile"
}

includefile:_cat_once() {
	local item
	local fullpath
	local b64t
	for item in "$@"; do
		[[ -n "$item" ]] || continue

		fullpath="$(searchpaths:file_from "$INCLUDEFILE_paths" "$item")"
		if [[ -z "$fullpath" ]]; then
			return 1
		fi
		
		out:debug "$item => $fullpath"
		b64t=";$(echo "$fullpath" | base64 -w 0);"
		if [[  "$INCLUDEFILE_tracker" =~ "$b64t" ]]; then
			out:debug "\033[33;1m    Skip re-inclusion of [$item] (is in '$INCLUDEFILE_tracker')"
			continue
		fi

		export INCLUDEFILE_tracker="$INCLUDEFILE_tracker $b64t"
		cat "$fullpath"
	done
}

includefile:cleanup() {
	rm ./._include-*
}
#!/bin/bash

### bincheck:get COMMANDS ... Usage:bbuild
#
# Return the first existing binary
#
# Useful for finding an appropriate binary when you know
# different systems may supply binaries under different names.
#
# Returns the full path from `which` for the first executable
# encountered.
#
# Example:
#
# 	bincheck:get markdown_py markdown ./mymarkdown
#
# Tries in turn to get a `markdown_py`, then a `markdown`, and then a local `./mymarkdown`
#
###/doc

bincheck:get() {
	local BINEXE=
	for binname in "$@"; do
		# Some implementations of `which` print error messages
		# Not useful here.
		BINEXE=$(which "$binname" 2>/dev/null)

		if [[ -n "$BINEXE" ]]; then
			echo "$BINEXE"
			return 0
		fi
	done
	return 1
}

### bincheck:has NAMES ... Usage:bbuild
#
# Determine if at least one of the binaries listed is present and installed on the system
#
###/doc

bincheck:has() {
	[[ -n "$(bincheck:get "$@")" ]]
}

### bincheck:path NAME Usage:bbuild
#
# Determine the actual path to the command
#
# Relative paths are not expanded.
#
###/doc

bincheck:path() {
	local binname="$1"; shift || :

	[[ "$binname" =~ / ]] && { 
		# A relative path cannot be resolved, just check existence
		[[ -e "$binname" ]] && echo "$binname" || return 1

	} || binname="$(which "$binname" 2>/dev/null)"

	# `which` failed
	[[ -n "$binname" ]] || return 1

	[[ -h "$binname" ]] && {

		local pointedname="$(ls -l "$binname"|grep -oP "$binname.+"|sed "s|$binname -> ||")"
		bincheck:path "$pointedname" ; return "$?"
	
	} || echo "$binname"
}


setup_build_dir() {
	mkdir -p "$BUILDOUTD" || out:fail "Cannot create the output directory !"
}

load_project_environment() {
	if [[ -f  "$BBUILD_ENV_FILE" ]]; then
		. "$BBUILD_ENV_FILE" || out:fail "Error during inclusion of environment file."
	fi
}

# checktags { FILENAME | TAG SPEC }
checktags() {
	if [[ -z "${1:-}" ]]; then return; fi

	if [[ "${IGNORETAGS:-}" = unsafe ]]; then
		return
	fi

	local tagsname="#%bbtags"
	if [[ "$1" != "$tagsname" ]]; then
		checktags $(grep "^$tagsname" "$1")
		return
	fi

	shift; # first arg is the bbtag
	
	for tag in "$@"; do
		case "$tag" in
			i:*)
				out:info "TAGS: $tag"
				;;
			w:*)
				out:warn "TAGS: $tag"
				;;
			e:*)
				out:fail "TAGS: $tag"
				;;
			*)	
				out:debug "TAGS: $tag"
				;;
		esac
	done
}

build_script() {
	local infile="$1"; shift
	local t_BBPATH="$(dirname "$infile"):$BBPATH"

	local fname="$(basename "$infile")"
	local tfile="$BUILDOUTD/$fname"

	out:info "Building $infile to $tfile"

	INCLUDEFILE_token="#%include"
	INCLUDEFILE_paths="$t_BBPATH"

	includefile:process "$infile" > "$tfile" || out:fail "Inclusion on $tfile failed."

	do_shellcheck "$tfile"
	checktags "$tfile"
	chmod 755 "$tfile"
}

do_shellcheck() {
	if [[ "$SHELLCHECK" = true ]]; then
		if bincheck:has shellcheck ; then
			shellcheck -s bash "$1"
		else
			out:warn "You need to install shellcheck to perform syntax check"
			SHELLCHECK=false
		fi
	fi
}

arg_valueof() {
	echo "${1#*=}"
}

parse_flag() {
	case "$1" in
	-C|--no-check)
		SHELLCHECK=false
		;;
	-c|--check)
		SHELLCHECK=true
		;;
	--out=*)
		BUILDOUTD="$(arg_valueof "$1")"
		;;
	--ignore-tags)
		IGNORETAGS=unsafe
		;;
	--release)
		DOSETRELEASE=true
		;;
	*)
		out:fail "Unknown argument $1"
		;;
	esac
}

build_files_list() {
	for arg in "$@"; do
		if [[ -f "$arg" ]]; then
			out:debug "File ${#prompt_file_list[@]} for processing: $arg"
			prompt_file_list[${#prompt_file_list[@]}]="$arg"

		elif [[ "$arg" =~ ^- ]]; then
			parse_flag "$arg"

		else
			out:fail "No such file $arg"
		fi
	done
}

main() {
	autohelp:check "$@"

	BBUILD_ENV_FILE=./bbuild_env

	# --- Defaults
	: ${BBPATH=./}
	: ${BUILDOUTD=./build-outd}
	: ${SHELLCHECK=false}

	# --- Settings file
	load_project_environment

	# --- Command line
	build_files_list "$@"

	# ++++++++++++++++
	# Now we process.

	setup_build_dir

	# BBFILES can be specified externally
	# command line overrides this IFF specified
	if [[ "${#prompt_file_list[@]}" -gt 0 ]]; then
		out:debug "Prompt files list is ${prompt_file_list[*]}"
		BBFILES=("${prompt_file_list[@]}")
	fi
	
	out:debug "And so, processing ${BBFILES[*]}"

	for infile in "${BBFILES[@]}"; do
		build_script "$infile"
	done
}

runmain bootstrap-bbuild5 main "$@"
