#!/bin/bash

VERSION_NUM=6.0
VERSION_NOTE="See https://github.com/taikedz/bbuild"

[[ "$*" = --version ]] && {
    echo "$VERSION_NUM"
    echo "$VERSION_NOTE"
    exit
}

### Bash Builder 6 Usage:help
# 
# This project is hosted at
#   https://github.com/taikedz/bbuild
#
#
# Build a script using Bash Builder
#
# 	bbuild [OPTIONS ...] SOURCE [DEST]
#
# SOURCE - the source script
# DEST - the destination file to build to
#
# Options
# -------
#
#   -c
#   --check
#   	use shellcheck
#
#   -C
#   --no-check
#   	don't use shellcheck
#
#   --ignore-tags
#   	Ignore tags in sourced files
#
#   --out=DIRECTORY
#   	Specify the default output directory
#   	Used if DEST is not specified.
#
#
# Syntax post-processing
# ----------------------
#
# Bash Builder 5.2+ provides a post-processing utiltiy enabling extra syntax macros that
# can help write easier-to-maintain code.
#
# Run bbuild `--help syntax` for more information
#
###/doc

#%include std/safe.sh
#%include std/autohelp.sh
#%include std/args.sh
#%include std/out.sh 
#%include std/debug.sh 
#%include std/includefile2.sh 
#%include std/bincheck.sh
#%include std/syntax-extensions.sh

#%include syntax.sh

$%function setup_build_dir(builddir) {
    mkdir -p "$builddir" || out:fail "Cannot create the output directory '$builddir'!"
}

# checktags { FILENAME | TAG SPEC }
checktags() {
    if [[ -z "${1:-}" ]]; then return; fi

    if [[ "${IGNORETAGS:-}" = unsafe ]]; then
        return
    fi

    local tagsname="#%bbtags"
    if [[ "$1" != "$tagsname" ]]; then
        checktags $(grep "^$tagsname" "$1")
        return
    fi

    shift; # first arg is the bbtag
    
    for tag in "$@"; do
        case "$tag" in
            i:*)
                out:info "TAGS: $tag"
                ;;
            w:*)
                out:warn "TAGS: $tag"
                ;;
            e:*)
                out:fail "TAGS: $tag"
                ;;
            *)	
                debug:print "TAGS: $tag"
                ;;
        esac
    done
}

$%function build_script(infile ?outfile) {
    local t_BBPATH="$(dirname "$infile"):$BBPATH"

    local tfname="$(basename "$infile")"
    local tfile="$BUILDOUTD/$tfname"

    if [[ -n "$outfile" ]]; then
        tfile="$outfile"
    fi

    setup_build_dir "$(dirname "$outfile")"

    out:info "Building $infile to $tfile"

    INCLUDEFILE_token="#%include"
    INCLUDEFILE_paths="$t_BBPATH"

    includefile:process "$infile" > "$tfile" || out:fail "Inclusion on $tfile failed : [${INCLUDEFILE_failed:-}]"

    bbuild:syntax_post "$tfile" || out:fail "Syntax post-processing on $tfile failed"

    do_shellcheck "$tfile"
    checktags "$tfile"
    chmod 755 "$tfile"
}

do_shellcheck() {
    if [[ "$SHELLCHECK" = true ]]; then
        if bincheck:has shellcheck ; then
            shellcheck -s bash "$1"
        else
            out:warn "You need to install shellcheck to perform syntax check"
        fi
    fi
}

arg_valueof() {
    echo "${1#*=}"
}

$%function parse_flag(flagstring) {
    case "$flagstring" in
    -C|--no-check)
        SHELLCHECK=false
        ;;
    -c|--check)
        SHELLCHECK=true
        ;;
    --out=*)
        BUILDOUTD="$(arg_valueof "$flagstring")"
        ;;
    --ignore-tags)
        IGNORETAGS=unsafe
        ;;
    --release)
        DOSETRELEASE=true
        ;;
    *)
        out:fail "Unknown argument '$flagstring'"
        ;;
    esac
}

$%function parse_options(*bsource *bdest) {
    local option

    while [[ -n "$*" ]]; do
        if [[ ! "$1" =~ ^- ]]; then
            break
        fi

        parse_flag "$1"
        shift
    done

    bsource="${1:-}"; shift || out:fail "No input file specified."

    ([[ -e "$bsource" ]] && [[ ! -d "$bsource" ]]) || out:fail "'$bsource' is not a file."

    bdest="${1:-}"
    if [[ -z "$bdest" ]]; then
        bdest="$BUILDOUTD/$(basename "$bsource")"
    fi
}

main() {
    # args: [OPTIONS ...] SOURCE [DEST]
    if [[ "$*" =~ "--help syntax" ]]; then
        autohelp:print syntax
        exit 0
    fi
    autohelp:check-or-null "$@"

    safe:glob on

    # --- Defaults
    : ${BBPATH=./}
    : ${BUILDOUTD=./build-outd}
    : ${SHELLCHECK=false}

    local buildsource builddest

    parse_options buildsource builddest "$@"

    build_script "$buildsource" "$builddest"
}

main "$@"
