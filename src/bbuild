#!/bin/bash

VERSION_NUM=5.3
VERSION_NOTE="See https://github.com/taikedz/bbuild"

[[ "$*" = --version ]] && {
    echo "$VERSION_NUM"
    echo "$VERSION_NOTE"
    exit
}

### Bash Builder 5 Usage:help
# 
# This project is hosted at
#   https://github.com/taikedz/bbuild
#
#
# Build a script using Bash Builder
#
# 	bbuild [OPTIONS ...] SCRIPTS ...
#
# Options
# -------
#
#   -c
#   --check
#   	use shellcheck for subsequent files
#
#   -C
#   --no-check
#   	don't use shellcheck for subsequent files
#
#   --ignore-tags
#   	Ignore tags in sourced files
#
#   --out=DIRECTORY
#   	Specify the output directory
#
# Environment
# -----------
#
# You can set environment variables in your .bashrc file, or in a local `./bbuildrc` file, which is sourced once before commencing build.
#
# The order of precedence for options and environment variables is:
#
# * command line arguments
# * `bbuildrc` settings
# * local environment settings
# * `.bashrc` settings
#
# Environment variables available, and their defaults:
#
# BBPATH -- a colon-separated list of directories wherein to find files for inclusion:
#
# 	BBPATH=$HOME/.local/lib/bbuild:/usr/local/lib/bbuild
#
#
# SHELLCHECK -- "true" or "false", whether to run shellcheck on the finally built script
#
# 	SHELLCHECK=false
#
#
# BUILDOUTD -- directory in which to place build results
#
#    BUILDOUTD=./build-outd
#
#
# IGNORETAGS -- if set to "unsafe", ignores tags and their effects.
#
# 	(unset by default)
#
# BBFILES -- a list of files to build ; overridden by any files specified on the command line
#   Surround these in parentheses to specify several scripts.
#   This allows simply running "bbuild" to build specified project scripts
#
# 	BBFILES=(src/script1 src/script2 libs/support_script)
# 
#
# Syntax post-processing
# ----------------------
#
# Bash Builder 5.2+ provides a post-processing utiltiy enabling extra syntax macros that
# can help write easier-to-maintain code.
#
# Run bbuild `--help syntax` for more information
#
###/doc

#%include autohelp.sh
#%include args.sh
#%include out.sh 
#%include debug.sh 
#%include includefile2.sh 
#%include bincheck.sh
#%include syntax.sh

setup_build_dir() {
    mkdir -p "$BUILDOUTD" || out:fail "Cannot create the output directory !"
}

load_project_environment() {
    # preventer is not true || or if it is, bail
    [[ "${NO_LOAD_BBUILDRC:-}" != true ]] || return 0

    if [[ -f  "$BBUILD_ENV_FILE" ]]; then
        . "$BBUILD_ENV_FILE" || out:fail "Error during inclusion of environment file."
    fi
}

# checktags { FILENAME | TAG SPEC }
checktags() {
    if [[ -z "${1:-}" ]]; then return; fi

    if [[ "${IGNORETAGS:-}" = unsafe ]]; then
        return
    fi

    local tagsname="#%bbtags"
    if [[ "$1" != "$tagsname" ]]; then
        checktags $(grep "^$tagsname" "$1")
        return
    fi

    shift; # first arg is the bbtag
    
    for tag in "$@"; do
        case "$tag" in
            i:*)
                out:info "TAGS: $tag"
                ;;
            w:*)
                out:warn "TAGS: $tag"
                ;;
            e:*)
                out:fail "TAGS: $tag"
                ;;
            *)	
                debug:print "TAGS: $tag"
                ;;
        esac
    done
}

$%function build_script(infile) {
    $%t_BBPATH="$(dirname "$infile"):$BBPATH"

    $%tfname="$(basename "$infile")"
    $%tfile="$BUILDOUTD/$tfname"

    out:info "Building $infile to $tfile"

    INCLUDEFILE_token="#%include"
    INCLUDEFILE_paths="$t_BBPATH"

    includefile:process "$infile" > "$tfile" || out:fail "Inclusion on $tfile failed : [${INCLUDEFILE_failed:-}]"

    bbuild:syntax_post "$tfile" || out:fail "Syntax post-processing on $tfile failed"

    do_shellcheck "$tfile"
    checktags "$tfile"
    chmod 755 "$tfile"
}

do_shellcheck() {
    if [[ "$SHELLCHECK" = true ]]; then
        if bincheck:has shellcheck ; then
            shellcheck -s bash "$1"
        else
            out:warn "You need to install shellcheck to perform syntax check"
            SHELLCHECK=false
        fi
    fi
}

arg_valueof() {
    echo "${1#*=}"
}

parse_flag() {
    case "$1" in
    -C|--no-check)
        SHELLCHECK=false
        ;;
    -c|--check)
        SHELLCHECK=true
        ;;
    --out=*)
        BUILDOUTD="$(arg_valueof "$1")"
        ;;
    --ignore-tags)
        IGNORETAGS=unsafe
        ;;
    --release)
        DOSETRELEASE=true
        ;;
    *)
        out:fail "Unknown argument $1"
        ;;
    esac
}

build_files_list() {
    for arg in "$@"; do
        if [[ -f "$arg" ]]; then
            debug:print "File ${#prompt_file_list[@]} for processing: $arg"
            prompt_file_list[${#prompt_file_list[@]}]="$arg"

        elif [[ "$arg" =~ ^- ]]; then
            parse_flag "$arg"

        else
            out:fail "No such file $arg"
        fi
    done
}

main() {
    if [[ "$*" =~ "--help syntax" ]]; then
        autohelp:print syntax
        exit 0
    fi
    autohelp:check "$@"

    BBUILD_ENV_FILE=./bbuildrc

    # --- Defaults
    : ${BBPATH=./}
    : ${BUILDOUTD=./build-outd}
    : ${SHELLCHECK=false}

    # --- Settings file
    load_project_environment

    # --- Command line
    build_files_list "$@"

    # ++++++++++++++++
    # Now we process.

    setup_build_dir

    # BBFILES can be specified externally
    # command line overrides this IFF specified
    if [[ "${#prompt_file_list[@]}" -gt 0 ]]; then
        debug:print "Prompt files list is ${prompt_file_list[*]}"
        BBFILES=("${prompt_file_list[@]}")
    fi

    if [[ -z "${BBFILES[*]}" ]]; then
        out:fail "No files to compile -- use a ./bbuildrc file to specify defaults (formerly bbuild_env)"
    fi
    
    debug:print "And so, processing ${BBFILES[*]}"

    for infile in "${BBFILES[@]}"; do
        build_script "$infile"
    done
}

main "$@"
