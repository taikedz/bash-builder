#!/usr/bin/env bash

set -euo pipefail

### Bash Builder Runner Usage:help
#
# Run a Bash Builder script directly without pre-compiling.
#
# Suitable for use with a shebang line.
#
#   bbrun SCRIPT [/lt] SCRIPT_ARGS ...
#
# If run normally, uses a temp file with the same name as
#  the original script in /tmp
#
# If run with the "/lt" modifier, uses a temp file in the same
#  directory as the original script. This allows use of
#  `$(dirname "$0")` references, but makes the use incompatible
#  with `runmain`
#
# Set environment variable `DEBUG_mode=true` to see the BBPATH and build target
#
###/doc

BBRUN_VERSION=1.1

#%include std/syntax-extensions.sh
#%include std/abspath.sh
#%include std/debug.sh
#%include std/colours.sh
#%include std/autohelp.sh

removebuilt() {
    rm "$BUILTSCR" "$BUILDMESSAGES"
}

rewrite_shebang() {
    sed '1 s/bbrun/bash/g' -i "$BUILTSCR"
}

check_build_failure() {
    if [[ "$1" != 0 ]]; then
        echo -n "$CRED"
        cat "$BUILDMESSAGES"
        echo -n "$CDEF"

        exit 1
    fi
}

$%function bbrun:main(bbscript ?option) {
    local tempscr thisname

    # Use absolute path so that built script is callable predictably
    thisname="$(abspath:path "$bbscript")"
    BUILTSCR="/tmp/$(basename "$bbscript")"

    # Track script arguments separately so that we can have a single front option on bbrun
    S_ARGS=(:)

    if [[ "$option" = /lt ]]; then
        BUILTSCR="$(mktemp "${thisname}-XXXX")"
        S_ARGS=(: "$@")

    elif [[ -n "$option" ]]; then
        S_ARGS=(: "$option" "$@")
    fi

    BUILDMESSAGES="$(mktemp)"

    debug:print "Building dynamically | BBPATH => $BBPATH"
    debug:print "Building to [$BUILTSCR]"

    bbuild "$bbscript" "$BUILTSCR" &> "$BUILDMESSAGES"
    BUILDRESULT=$?

    trap removebuilt exit
    check_build_failure "$BUILDRESULT"


    rewrite_shebang

    "$BUILTSCR" "${S_ARGS[@]}"
}

autohelp:check-or-null "$@"
bbrun:main "$@"
